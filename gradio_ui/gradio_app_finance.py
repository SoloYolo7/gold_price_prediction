import os
import io
import json
import gradio as gr
import pandas as pd
import requests
from datetime import datetime

# –ê–¥—Ä–µ—Å API –±–µ—Ä—ë–º –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ –≤ k8s.
API_URL = os.getenv("API_URL", "/api-gold-price-prediction/predict")
REQUEST_TIMEOUT = float(os.getenv("REQUEST_TIMEOUT", "60"))

def _pretty_http_error(resp: requests.Response) -> str:
    """
    –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –¥–æ—Å—Ç–∞—ë–º detail –∏–∑ FastAPI/–ª—é–±–æ–≥–æ JSON-–æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç.
    """
    try:
        payload = resp.json()
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
        if isinstance(payload, dict):
            if "detail" in payload:
                return json.dumps(payload["detail"], ensure_ascii=False)
            return json.dumps(payload, ensure_ascii=False)
        return str(payload)
    except Exception:
        return resp.text

def predict_gold_price(uploaded_file):
    if uploaded_file is None:
        raise gr.Error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.")

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ multipart/form-data
    try:
        with open(uploaded_file.name, "rb") as f:
            files = {"file": (os.path.basename(uploaded_file.name), f, "text/csv")}
            resp = requests.post(API_URL, files=files, timeout=REQUEST_TIMEOUT)
        # –µ—Å–ª–∏ –∫–æ–¥ –Ω–µ 2xx ‚Äî –∫–∏–Ω–µ—Ç HTTPError
        resp.raise_for_status()
        data = resp.json()
        predictions = data.get("predictions")
    except requests.exceptions.ConnectionError:
        raise gr.Error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {API_URL}")
    except requests.exceptions.Timeout:
        raise gr.Error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API (timeout={REQUEST_TIMEOUT}s).")
    except requests.exceptions.HTTPError:
        # –ü–æ–∫–∞–∂–µ–º —Ç–µ–ª–æ –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏–ª FastAPI
        detail = _pretty_http_error(resp)
        raise gr.Error(f"API error {resp.status_code}: {detail}")
    except ValueError:
        # .json() –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç
        raise gr.Error(f"API –≤–µ—Ä–Ω—É–ª –Ω–µ-JSON –æ—Ç–≤–µ—Ç: {resp.text[:500]}")
    except Exception as e:
        raise gr.Error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}")

    if predictions is None:
        raise gr.Error("API –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–æ–ª–µ 'predictions'.")

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/–≤—ã–≥—Ä—É–∑–∫–∏
    try:
        df_original = pd.read_csv(uploaded_file.name)
    except Exception:
        # –¥–∞–∂–µ –µ—Å–ª–∏ –≤—Ö–æ–¥ –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ (–∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π),
        # –æ—Ç–¥–∞–¥–∏–º —Ö–æ—Ç—è –±—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.
        df_original = pd.DataFrame()

    if not df_original.empty and len(predictions) == len(df_original):
        df_original["Predicted_Gold_Close"] = predictions
    else:
        df_original = pd.DataFrame(predictions, columns=["Predicted_Gold_Close"])

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    output_dir = "outputs"
    os.makedirs(output_dir, exist_ok=True)
    ts = datetime.now().strftime("%Y%m%d_%H%M%S")
    csv_path = os.path.join(output_dir, f"predictions_{ts}.csv")
    xlsx_path = csv_path.replace(".csv", ".xlsx")

    df_original.to_csv(csv_path, index=False)
    try:
        # openpyxl –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
        df_original.to_excel(xlsx_path, index=False, engine="openpyxl")
    except Exception:
        # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ—Ç openpyxl ‚Äî –Ω–µ –ø–∞–¥–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –Ω–µ –¥–∞—ë–º xlsx
        xlsx_path = None

    csv_out = gr.update(visible=True, value=csv_path)
    xlsx_out = gr.update(visible=xlsx_path is not None, value=xlsx_path if xlsx_path else None)
    return df_original, csv_out, xlsx_out


with gr.Blocks(theme=gr.themes.Default(), title="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã –∑–æ–ª–æ—Ç–∞") as demo:
    gr.Markdown("# üìà –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –∑–æ–ª–æ—Ç–æ")
    gr.Markdown(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑. "
        f"<br/><small>API: <code>{API_URL}</code></small>"
    )

    with gr.Row():
        with gr.Column(scale=1):
            file_input = gr.File(
                label="CSV —Ñ–∞–π–ª",
                file_types=[".csv"],
                info="–î–ª—è —Ç–µ—Å—Ç–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å sample_for_prediction.csv",
            )
            btn_predict = gr.Button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", variant="primary")
            btn_download_csv = gr.File(label="–°–∫–∞—á–∞—Ç—å CSV", visible=False)
            btn_download_excel = gr.File(label="–°–∫–∞—á–∞—Ç—å Excel", visible=False)
        with gr.Column(scale=2):
            df_output = gr.DataFrame(label="–†–µ–∑—É–ª—å—Ç–∞—Ç")

    btn_predict.click(
        predict_gold_price,
        inputs=file_input,
        outputs=[df_output, btn_download_csv, btn_download_excel],
    )

if __name__ == "__main__":
    demo.queue()
    demo.launch(
        server_name="0.0.0.0",
        server_port=int(os.getenv("PORT", "7860")),
        root_path=os.getenv("ROOT_PATH", "/ui-gold-price-prediction"),
    )

 